<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>skynet on trainyao.github.io</title>
    <link>https://trainyao.github.io/categories/skynet/</link>
    <description>Recent content in skynet on trainyao.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 10 Jun 2018 22:48:30 +0000</lastBuildDate><atom:link href="https://trainyao.github.io/categories/skynet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>skynet里的定时器</title>
      <link>https://trainyao.github.io/post/skynet/timer/</link>
      <pubDate>Sun, 10 Jun 2018 22:48:30 +0000</pubDate>
      
      <guid>https://trainyao.github.io/post/skynet/timer/</guid>
      <description>这周花了点时间看了 skynet 关于定时器功能的源码,以及扩展的了解了一下定时器实现的其他方案,写一遍博客总结一下.内容会分为下面几部分:
 skynet的定时器结构图 skynet定时器执行过程 关于skynet定时器的一些思考 其他定时器方案 linux定时器方案 总结  1. skynet 的定时器结构图 2. skynet 定时器执行过程 首先确定定时器里面的几个概念:
 tick: 指 skynet timer 线程每一次处理事件的循环.由于这个循环每隔 0.00025 秒会执行一次,很像时钟滴答滴答的走,很多书籍都称为 tick skynet 启动时间戳: 顾名思义,比如 1528613417 时间戳(北京时间 2018/6/10 14:50:17)代表 skynet 是这个时间点启动的,而且这个时间是不会变的.这个比较容易理解 系统启动时间数: 单位 0.01 秒. 顾名思义,但是为什么说是时间数呢?因为这是一个时间的量,比如300,表示系统启动了3秒. skynet timer 线程在每一次 tick 都会去同步这个时间量 skynet 启动时间数: 单位 0.01 秒. 与系统启动时间数类似,如 300,表示 skynet 启动了 3 秒,每次 tick skynet timer 线程也会去更新这个时间量  首先需要说明的是, skynet 定时器的时间刻度是百分秒(0.01秒).意味着 skynet 最小可以定义事件 0.01 秒后执行.这个精度对于游戏领域可以说是够用了.
skynet 初始化时会创建5个定时器的事件槽,分别是 Near,level0-3.</description>
    </item>
    
    <item>
      <title>skynet 概览</title>
      <link>https://trainyao.github.io/post/skynet/overview/</link>
      <pubDate>Mon, 04 Jun 2018 07:15:34 +0000</pubDate>
      
      <guid>https://trainyao.github.io/post/skynet/overview/</guid>
      <description>这个星期以来，由于工作需要使用skynet，于是看了5天skynet的源码。收获很多，于是周末写篇博文总结一下这周以来的学习。
这5天的学习过程可以概括为5句话：（因为5天嘛）
 代码结构，从main函数开始 skynet启动过程，worker线程工作过程 skynet启动过程，skynet数据结构熟悉， worker回调函数注册，worker的c层回调lua逻辑原理， lua层逻辑协程的使用熟悉，服务之间通过消息交互的过程  看了5天后回过头来发现，其实了解的还停留在skynet的核心部分，还没有走出核心。因为skynet还包含很多其他内容，比如他的消息机制的各种api、socket支持、loginserver gateserver、datacenter、harbor等等。。。
不过问题也不大，毕竟核心比较重要，后续还要继续学习。
那下面就来总结一下这5天都看到来什么内容。有可能因为我了解尚浅，写出来的和实际的skynet有出入。不过没关系，后续会回过头来再看看。
下面的总结会按照这个结构：
 源码目录结构 skynet的结构图以及工作过程  那么，开始吧。
1. 源码目录结构 可以用一个段落来说明
$ ll drwxr-xr-x 26 root staff 884 6 1 06:30 . drwxr-xr-x 5 root staff 170 6 2 07:07 .. drwxr-xr-x 12 root staff 408 6 1 07:10 .git -rw-r--r-- 1 root staff 94 6 1 05:36 .gitignore -rw-r--r-- 1 root staff 96 6 1 05:36 .gitmodules drwxr-xr-x 8 root staff 272 6 1 22:25 .</description>
    </item>
    
  </channel>
</rss>
