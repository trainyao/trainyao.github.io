<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on trainyao.github.io</title>
    <link>https://trainyao.github.io/categories/devops/</link>
    <description>Recent content in devops on trainyao.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://trainyao.github.io/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>k8s 使用方法 &amp; 备忘</title>
      <link>https://trainyao.github.io/post/devops/k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://trainyao.github.io/post/devops/k8s/</guid>
      <description>kubeadm init &amp;ndash;kubernetes-version=1.18.1 &amp;ndash;apiserver-advertise-address=192.168.128.130 &amp;ndash;image-repository registry.aliyuncs.com/google_containers &amp;ndash;service-cidr=10.1.0.0/16 &amp;ndash;pod-network-cidr=10.244.0.0/16
 ref https://www.cnblogs.com/xiao987334176/p/12696740.html    安装 flannel: wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml &amp;amp;&amp;amp; grep 10.244 -n kube-flannel.yml &amp;amp;&amp;amp; sed -i &amp;rsquo;s/10.244.0.0/16/[pod network cidr]/&#39; &amp;amp;&amp;amp; kubectl apply -f kube-flannel.yml
  cni
 cni 插件工作原理  init config to /etc/cni/net.d/-.conflist kubelet 内的 CRI 实现, dockershim 加载配置文件 kubelet 根据配置文件, 依次调用 CNI 插件, 初始化 pause 容器, 配置容器网络   细节  hairpin mode, 配置 cni 网桥 veth 设备接收数据包的功能, 确保容器可以在容器网络里访问自己   plugins  plugins 都依照 containernetworking/cni/skel 做基本框架 bridge  source code containernetworking/plugins/bridge 依托 lib github.</description>
    </item>
    
    <item>
      <title>linux 使用方法 &amp; 备忘</title>
      <link>https://trainyao.github.io/post/devops/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://trainyao.github.io/post/devops/linux/</guid>
      <description>  lsb_release -cs 查看 linux 发行号
  usermod -a -G [group] [username] / groupmems -g [group] -a [username]
  修改大文件
 tail -n +3 old &amp;gt; new, -n 参数支持+号    </description>
    </item>
    
    <item>
      <title>mysql 使用方法 &amp; 备忘</title>
      <link>https://trainyao.github.io/post/devops/mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://trainyao.github.io/post/devops/mysql/</guid>
      <description> set FOREIGN_KEY_CHECKS=0; 可以避免 discard table 外键错误 &amp;ldquo;cannot delete or update a parent row a foreign key constraint fails&amp;rdquo; &amp;lsquo;Constant, random or timezone-dependent expressions in (sub)partitioning function are not allowed&amp;rsquo; 分区函数嵌套使用, 会出这个错误, 比如 to_days(mode()), 好像是因为 to_days 参数不能是 random 的  </description>
    </item>
    
    <item>
      <title>rancher 使用方法 &amp; 备忘</title>
      <link>https://trainyao.github.io/post/devops/rancher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://trainyao.github.io/post/devops/rancher/</guid>
      <description> 可以配置 cluster 的 catalogs, 配置 helm charts 作为集群可以使用的 app  </description>
    </item>
    
    <item>
      <title>redis 使用方法 &amp; 备忘</title>
      <link>https://trainyao.github.io/post/devops/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://trainyao.github.io/post/devops/redis/</guid>
      <description>config (base on v6.2.0)  general  client &amp;amp; connections  bind 0.0.0.0 port 6379 protected-mode yes # protected mode 只允许 socket 和 17.0.0.1 连接 maxclients 10000 requirepass password # 配置密码   bgsave  save time changecount # 多级配置持久化, 配置多长时间内变更过 key 数大于 changecount, 则进行bgsave  save 900 1 save 300 10 save 60 10000     file &amp;amp; dir  dbfilename dump.rdb dir /data   runtime  maxmemory  maxmemory-policy  noeviction volatile-lru|volatile-lfu|volatile-random|volatile-ttl allkeys-lru|allkeys-lfu|allkeys-random       middle  slowlog  slowlog-log-slower-than 1000000 # 超过微数, 记录slowlog, 1000000 = 1s slowlog-max-len 128 # slowlog 内存中保存的份数, redis 的 slowlog 是保存在内存的, 注意内存用量   client &amp;amp; connections  tcp-backlog 511 # 繁忙时 server 入队的 backlog connections 数 timeout 3600 # 3600 秒后关闭空闲的 client tcp-keepalive 300 # server 给 client 发送心跳检测, 超过配置时间断开连接   log  loglevel notice logfile &#39;&#39; syslog-enabled no # redis log 输出到 syslog   runtime  maxmemory-samples 5 # maxmemory 算法执行时在多少个 key 中计算 lru lfu 等算法, redis 不会在全量 key 中计算, 而是拿出配置数量 key 分组计算, 默认 5 databases 16   bgsage  stop-writes-on-bgsave-error yes # bgsave 失败停止写入, 为了能让用户感知 bgsave 失败了, 或者减少数据损失?</description>
    </item>
    
    <item>
      <title>ssh 使用方法 &amp; 备忘</title>
      <link>https://trainyao.github.io/post/devops/ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://trainyao.github.io/post/devops/ssh/</guid>
      <description> server 端 /var/log/auth.log 可以看日志 client 端 ssh user@host -pport -vvvv 可以看 client 和 server 端交互过程, 及来回的错误码 sshd_config 配置项不可覆盖, 详情可以用 -T 调试配置效果 sshd -T | grep [config] 可以实时看 ssh 配置效果, 有时候配置值没生效可以定位出来 root 免密登录需要配置 /root/.ssh/authorized_keys 公钥, 以及配置 sshd_config PermitRootLogin yes  PermitRootLogin 有 yes, prohibit-password, without-password, forced-commands-only, no 选项, 默认 prohibit-password   有博文说 /root 目录下的文件夹和文件的权限和拥有者, 会影响 root ssh 登录, 这个待验证  ref:
 https://stackoverflow.com/questions/41684706/login-refused-for-root-via-ssh https://superuser.com/questions/1137438/ssh-key-authentication-fails  </description>
    </item>
    
  </channel>
</rss>
