<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>trainyao.github.io</title>
    <link>https://trainyao.github.io/post/</link>
    <description>Recent content on trainyao.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 16 Feb 2018 15:41:02 +0000</lastBuildDate>
    
	<atom:link href="https://trainyao.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring与SpringBoot的IoC和DI</title>
      <link>https://trainyao.github.io/post/java/spring/spring_springboot_ioc_di/</link>
      <pubDate>Fri, 16 Feb 2018 15:41:02 +0000</pubDate>
      
      <guid>https://trainyao.github.io/post/java/spring/spring_springboot_ioc_di/</guid>
      <description>Spring与SpringBoot的IoC和DI 前言 spring的内容有很多，而springBoot对于spring的优化的内容也有非常多方面可讲。这次主要分享的是spring和springBoot中的IoC和DI，以及我所看到的在我们java项目中的体现。
Ioc(控制反转) 控制反转即反转控制类实例的方式。 从控制反转为被控制 从自己生成/销毁反转为别人生成/销毁 控制反转的好处在于： - 业务逻辑中不用考虑实例的生成/销毁，可以专注于业务逻辑(使用类实例) - 对测试更加友好(mock实例行为)
DI(依赖注入) 依赖注入是控制反转的一种实现方法。&amp;rdquo;别人&amp;rdquo;管理类实例的生成/销毁，并将业务逻辑需要用到的类实例注入进来。
Spring的IoC 一个Spring应用有一个应用上下文（ApplicationContext），充当类实例的容器，管理着类实例的生成和销毁，并在应用需要时返回/注入对应的类实例。 Spring按类实例的种类管理容器中的类实例（种类有唯一的种类id：beanId）。每一种类实例称为Bean。 与很多IoC框架类似，类实例的注入方式有很多种(单例/非单例)，Spring中类实例存在方式可以是： - 单例 (singleton) - 每次注入返回新的实例 (prototype) - 每次请求返回同一的实例 (request) - 每次回话返回同一实例 (session/global session)
以下是spring注册Bean的其中某些特性： - 1. xml可以配置BeanId，默认以类名为beanId。 - 2. 注解为bean的时候默认以类名为beanId，也可以指定beanId - 3. 在获取bean时，如果无法查找到beanId，会查找对应的类是否有注册，如果不存在，会查找对应类的子类是否有注册
另外，spring的IoC和DI利用了java的注解实现，也是面向切面编程的一个体现。在加载应用的时候，切换到应用bean管理切面，扫描类并注册Bean，在需要注入时，再次切换到bean管理切面，返回需要的bean。
SpringBoot的IoC springBoot简化了spring的配置部分 spring通过xml配置文件扫描/注解方式注册类实例 springBoot默认通过注解方式注册类实例，并默认扫描application包以及子包的所有类实例。默认以注解方式标记类实例。 springBoot可以沿用spring注解配置Bean时的规则</description>
    </item>
    
    <item>
      <title></title>
      <link>https://trainyao.github.io/post/php/php_extension/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://trainyao.github.io/post/php/php_extension/overview/</guid>
      <description>@(PHP) ###PHP扩展分享 ###什么时候需要写php扩展 * 有需要使用php调用C/C++函数库 * 实现php没有的功能 * 优化php性能
###php扩展简介 php提供一个工具用来生成php扩展的代码,类似代码生成器,工具目录source/to/php_source_code/ext/ext_skel,这个是供类unix平台调用的脚本,php源码也提供了一个供windows平台调用的脚本,用来生成php扩展代码.该脚本是个php脚本,在source/to/php_source_code/ext/ext_skel_win32.php
php将扩展代码统一放到source/to/php_source_code/ext/下,这样当开发者按照工具生成对应格式的php扩展源码,并统一放到这个目录下,php源码就会自动识别,并可以选在在编译时加上开发者的扩展. ###先找个题目 总所周知php在连接字符串会进行多次初始化临时变量,和内存复制.假设有一个变态的需求需要重复一个字符串&amp;rsquo;a&amp;rsquo; n次,并且在系统中多次出现,由于n已知,为了提高性能,可以考虑用扩展实现 ###动手 ####1. 编写扩展原型文件,使用工具生成扩展代码
php没有规定原型文件的文件后缀,但有规定原型文件的格式. 如果你的扩展需要暴露出接口函数供php代码调用,原型文件只需包含接口函数的原型.接口函数原型包括函数输入参数的类型和名字,还有函数返回的类型.其中类型支持php的变量类型.如bool,int,string,float等等.. 根据上面的需求,创建一个名为repeatString的函数,返回类型为string,接受一个string类型的$inputString字符串,和一个int类型的$repeatCount,表示输出$inputString被重复$repeatCount次的字符串. 首先进入ext目录
cd path/to/php_source_code/ext &amp;amp;&amp;amp; \ vim repeatString.proto  编写内容
string repeatString(string inputString, int repeatCount)  保存,使用ext_skel工具生成扩展框架,可以指定扩展名和扩展的原型文件
./ext_skel --extname=repeatString --proto=repeatString.proto  你会看到ext目录下会多了一个repeatString的文件夹,里面放的就是你扩展的所有所需文件 需要留意的有几个文件:
 config.m4 &amp;ndash; *unix平台下配置文件,这里是官方解释:   扩展的 config.m4 文件告诉 UNIX 构建系统哪些扩展 configure 选项是支持的，你需要哪些扩展库，以及哪些源文件要编译成它的一部分。对所有经常使用的 autoconf 宏，包括 PHP 特定的及 autoconf 内建的，请查看 Zend Engine 2 API 参考 章节。
  config.</description>
    </item>
    
  </channel>
</rss>